Gcairo = require("scripts/cairo_ui/base")
require("scripts/utils/xml-reader")

local tcolor = { r=0.0, b=1.0, g=0.0, a=1.0 }
local vcolor = { r=1.0, b=0.0, g=0.0, a=1.0 }

local xmlp = require("scripts.libs.xmlparser") 
local htmlr = require("scripts.libs.htmlrenderer") 

function init(self)
	-- Add initialization code here
	-- Remove this function if not needed

	msg.post(".", "acquire_input_focus")
	self.mouse = vmath.vector3(0, 0, 0)
	self.buttons = { 0,0,0 }
		
	Gcairo.newObject	= nil
	Gcairo:Init(RENDER_WIDTH, RENDER_HEIGHT)	

	msg.post("/go#main1", "initgui")

	local filename = "/data/html/sample01.html"
	local xml = sys.load_resource(filename)
	self.xmldoc = xmlp.parse(xml)
	xmlp.dumpxml(self.xmldoc)
	
	-- Override some of the modes for sliders and exploders
	-- CAIRO_UI.EXPLODER_MODE = "outExpo"
	-- CAIRO_UI.SLIDER_MODE = "outBounce"	
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
	Gcairo:Finish()
end

-- Each render line is effectively a render layer. Thus the order things are rendered here 
-- control how objects are layered on screen. They can be dynamically shifted.
--  TODO: Layers will be single surfaces and textures within Defold for hi perf.
local bgcolor = { r=0.5, g=0.2, b=0.3, a=1.0 }

function update(self, dt)

	Gcairo:Begin(dt)

	Gcairo:RenderBox(30, 30, 200, 35, 5)
	Gcairo:RenderText("Web Test V0.1", 50, 55, 20, tcolor )

	Gcairo:RenderBox(0, 90, 1280, 800, 0, {r=1.0, g=1.0, b=1.0, a=1.0})
	htmlr.renderxml( Gcairo, self.xmldoc, { left=10, top=100.0 } )
	
	Gcairo:Update(self.mouse.x, self.mouse.y, self.buttons, dt)
	Gcairo:Render()
	msg.post("/go#main1", "rendergui")
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
	self.mouse.x = action.x
	self.mouse.y = RENDER_HEIGHT - action.y

	if action_id == hash("touch") then 
		if action.pressed then
			self.buttons[1] = true
		else
			self.buttons[1] = false
		end
	end	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end

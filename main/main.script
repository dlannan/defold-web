
local tcolor = { r=0.0, b=1.0, g=0.0, a=1.0 }
local vcolor = { r=1.0, b=0.0, g=0.0, a=1.0 }

local xmlp = require("scripts.libs.xmlparser") 
local htmlr = require("scripts.libs.htmlrenderer") 

local LEFT_MOUSE = hash("mouse_button_left")
local MIDDLE_MOUSE = hash("mouse_button_middle")
local RIGHT_MOUSE = hash("mouse_button_right")
local WHEEL_UP = hash("mouse_wheel_up")
local WHEEL_DOWN = hash("mouse_wheel_down")
local TEXT = hash("text")
local KEY_SHIFT = hash("key_shift")
local KEY_CTRL = hash("key_ctrl")
local KEY_ALT = hash("key_alt")
local KEY_SUPER = hash("key_super")

-- order MUST match enums in ImGuiKey_
local IMGUI_KEYS = {
	"key_tab",
	"key_left",
	"key_right",
	"key_up",
	"key_down",
	"key_pageup",
	"key_pagedown",
	"key_home",
	"key_end",
	"key_insert",
	"key_delete",
	"key_backspace",
	"key_space",
	"key_enter",
	"key_esc",
	"key_numpad_enter",
	"key_a",
	"key_c",
	"key_v",
	"key_x",
	"key_y",
	"key_z",
}

-- map action_id (key) to ImGuiKey_ enums
local IMGUI_KEYMAP = {}
for i=1,#IMGUI_KEYS do
	local key = IMGUI_KEYS[i]
	IMGUI_KEYMAP[hash(key)] = i - 1
end

function ImGuiSetup(self)
	local fontsizebase = 26.0
	local fontsize = 1.0

	-- Load a default font 
	imgui.set_defaults()
	self.renderCtx.fonts = {}
	self.renderCtx.window = { x = 50, y = 50 }

	local regular_data, error = sys.load_resource("/data/fonts/Montserrat-Regular.ttf")
	self.renderCtx.fonts["Regular"] = imgui.font_add_ttf_data(regular_data, fontsize, fontsizebase)
	local bold_data, error = sys.load_resource("/data/fonts/Montserrat-Bold.ttf")
	self.renderCtx.fonts["Bold"] = imgui.font_add_ttf_data(bold_data, fontsize, fontsizebase)
	local italic_data, error = sys.load_resource("/data/fonts/Montserrat-Italic.ttf")
	self.renderCtx.fonts["Italic"] = imgui.font_add_ttf_data(italic_data, fontsize, fontsizebase)
	local bolditalic_data, error = sys.load_resource("/data/fonts/Montserrat-BoldItalic.ttf")
	self.renderCtx.fonts["BoldItalic"] = imgui.font_add_ttf_data(bolditalic_data, fontsize, fontsizebase)
	self.renderCtx.fontsize = fontsizebase
	self.renderCtx.getstyle = function( style )
		local fontface = style.fontface or "Regular"
		if(style.fontweight == 1) then fontface = "Bold" end 
		if(style.fontstyle == 1) then fontface = "Italic" end 
		if(style.fontstyle == 1 and style.fontweight == 1) then fontface = "BoldItalic" end 
		return self.renderCtx.fonts[fontface]
	end 	
	self.renderCtx.setstyle = function( style )
		local fontface = self.renderCtx.getstyle(style)
		imgui.font_push(fontface)
	end 
	self.renderCtx.unsetstyle = function()
		imgui.font_pop()
	end 

	imgui.set_style_color(imgui.ImGuiCol_WindowBg, 1.00, 1.00, 1.00, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_Text, 0.90, 0.90, 0.90, 0.90)
	imgui.set_style_color(imgui.ImGuiCol_TextDisabled, 0.60, 0.60, 0.60, 1.00)
	imgui.set_style_color(imgui.ImGuiCol_FrameBg, 1.00, 1.00, 1.00, 1.00)
end 


function init(self)
	-- Add initialization code here
	-- Remove this function if not needed

	msg.post(".", "acquire_input_focus")
	self.buttons = { 0,0,0 }
		
	local filename = "/data/html/sample01.html"
	local xml = sys.load_resource(filename)
	self.xmldoc = xmlp.parse(xml)
	-- xmlp.dumpxml(self.xmldoc)
	
	-- Override some of the modes for sliders and exploders
	-- CAIRO_UI.EXPLODER_MODE = "outExpo"
	-- CAIRO_UI.SLIDER_MODE = "outBounce"	
	
	self.actions = {}
	self.mouse = {
		x = 0,
		y = 0,
		wheel = 0,
		buttons = {},
	}
	self.renderCtx = {
		fontids = {},
	}

	ImGuiSetup(self)

	-- Toggle the visual profiler on hot reload.
	self.profile = true
	profiler.enable_ui(self.profile)
end

function final(self)
end

-- Each render line is effectively a render layer. Thus the order things are rendered here 
-- control how objects are layered on screen. They can be dynamically shifted.
--  TODO: Layers will be single surfaces and textures within Defold for hi perf.
local bgcolor = { r=0.5, g=0.2, b=0.3, a=1.0 }

function update(self, dt)


	local flags = imgui.WINDOWFLAGS_NOTITLEBAR
--	flags = bit.bor(flags, imgui.WINDOWFLAGS_NOBACKGROUND)
	flags = bit.bor(flags, imgui.WINDOWFLAGS_NORESIZE)
	flags = bit.bor(flags, imgui.WINDOWFLAGS_NOMOVE)

	local w, h = window.get_size()
	imgui.set_display_size(w, h)
	
	imgui.set_next_window_size(w/2, h/1.5 )
	imgui.set_next_window_pos( self.renderCtx.window.x, self.renderCtx.window.y )

	imgui.begin_window("Main", true, flags )
	htmlr.renderxml( self.renderCtx, self.xmldoc, { left=10, top=10.0 } )
	imgui.end_window()


	imgui.set_mouse_input(
	self.mouse.x,
	h - self.mouse.y,
	self.mouse.buttons[LEFT_MOUSE] or 0,
	self.mouse.buttons[MIDDLE_MOUSE] or 0,
	self.mouse.buttons[RIGHT_MOUSE] or 0,
	self.mouse.wheel
	)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	if action_id == LEFT_MOUSE or action_id == MIDDLE_MOUSE or action_id == RIGHT_MOUSE then
		if action.pressed then
			self.mouse.buttons[action_id] = 1
		elseif action.released then
			self.mouse.buttons[action_id] = 0
		end
	elseif action_id == WHEEL_UP then
		self.mouse.wheel = action.value
	elseif action_id == WHEEL_DOWN then
		self.mouse.wheel = -action.value
	elseif action_id == TEXT then
		imgui.add_input_character(action.text)
	elseif action_id == KEY_SHIFT then
		if action.pressed or action.released then
			imgui.set_key_modifier_shift(action.pressed == true)
		end
	elseif action_id == KEY_CTRL then
		if action.pressed or action.released then
			imgui.set_key_modifier_ctrl(action.pressed == true)
		end
	elseif action_id == KEY_ALT then
		if action.pressed or action.released then
			imgui.set_key_modifier_alt(action.pressed == true)
		end
	elseif action_id == KEY_SUPER then
		if action.pressed or action.released then
			imgui.set_key_modifier_super(action.pressed == true)
		end
	else
		if action.pressed or action.released then
			local key = IMGUI_KEYMAP[action_id]
			if key then
				imgui.set_key_down(key, action.pressed == true)
			end
		end
	end

	if not action_id then
		self.mouse.x = action.screen_x
		self.mouse.y = action.screen_y
	end

	-- Check some keys - 1, 2, 3 for profiling
	if(action.released) then 
		if action_id == hash("zero") then
			self.profile = not self.profile
			profiler.enable_ui(self.profile)
		end 
		if action_id == hash("one") then
			profiler.set_ui_mode(profiler.MODE_RUN)
		end 
		if action_id == hash("two") then
			profiler.set_ui_mode(profiler.MODE_PAUSE)
		end
		if action_id == hash("three") then
			profiler.set_ui_mode(profiler.MODE_RECORD)
		end
	end
end

function on_reload(self)
	-- Toggle the visual profiler on hot reload.
	profiler.enable_ui(true)
end
